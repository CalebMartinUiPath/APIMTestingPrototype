/*
 * APIM Testing
 *
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 1.0
 * Generated by: https://github.com/openapitools/openapi-generator.git
 */

using System;
using System.IO;
using System.Collections.Generic;
using System.Collections.ObjectModel;
using System.Linq;
using System.Net;
using System.Reflection;
using System.Threading.Tasks;
using RestSharp;
using Xunit;

using Org.OpenAPITools.Client;
using Org.OpenAPITools.Api;
using UiPath.TestFixture.Mock;
using UiPath.TestFixture.Mock.context;

namespace Org.OpenAPITools.Test.Api
{
    /// <summary>
    ///  Class for testing DefaultApi
    /// </summary>
    /// <remarks>
    /// This file is automatically generated by OpenAPI Generator (https://openapi-generator.tech).
    /// Please update the test case below to test the API endpoint.
    /// </remarks>
    public class DefaultApiTests : IDisposable
    {
        private DefaultApi instance;

        public DefaultApiTests()
        {
            instance = new DefaultApi();
        }

        public void Dispose()
        {
            // Cleanup when everything is done.
        }

        /// <summary>
        /// Test an instance of DefaultApi
        /// </summary>
        [Fact]
        public void InstanceTest()
        {
            // TODO uncomment below to test 'IsType' DefaultApi
            Assert.IsType<DefaultApi>(instance);
        }

        /// <summary>
        /// Test Actions
        /// </summary>
        [Fact]
        public void ActionsTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            instance.Actions();
        }

        /// <summary>
        /// Test Apps
        /// </summary>
        [Fact]
        public async Task AppsTest()
        {
            var fixture = await DependencyTestFixture.Of(DependencyMode.LocationService);
            var apiResponse = new ApiResponse<EmptyType>(HttpStatusCode.InternalServerError, new EmptyType(), "response not ok");
            var expectedResponse = new MockResponse
            {
                Content = apiResponse
            };

            // Arrange
            fixture
                .Setup()
                .Returns(expectedResponse);
            SetHeader(expectedResponse.id);

            // Act
            instance.AppsWithHttpInfo();

            // Assert

        }

        private void SetHeader(Guid id)
        {
            instance.Configuration.DefaultHeaders["X-MockService-Host"] = $"https://test-fixture-ii.azurewebsites.net/api/{id}";
        }

        /// <summary>
        /// Test CreateFolder
        /// </summary>
        [Fact]
        public void CreateFolderTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.CreateFolder();
        }

        /// <summary>
        /// Test DocumentUnderstanding
        /// </summary>
        [Fact]
        public void DocumentUnderstandingTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.DocumentUnderstanding();
        }

        /// <summary>
        /// Test GetTenantsAndOrgInfo
        /// </summary>
        [Fact]
        public void GetTenantsAndOrgInfoTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.GetTenantsAndOrgInfo();
        }

        /// <summary>
        /// Test Orchestrator
        /// </summary>
        [Fact]
        public void OrchestratorTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Orchestrator();
        }

        /// <summary>
        /// Test OrchestratorBad
        /// </summary>
        [Fact]
        public void OrchestratorBadTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.OrchestratorBad();
        }

        /// <summary>
        /// Test Portal
        /// </summary>
        [Fact]
        public void PortalTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            instance.Portal();
        }

        /// <summary>
        /// Test Processes
        /// </summary>
        [Fact]
        public void ProcessesTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Processes();
        }

        /// <summary>
        /// Test Studio
        /// </summary>
        [Fact]
        public void StudioTest()
        {
            // TODO uncomment below to test the method and replace null with proper value
            //instance.Studio();
        }
    }
}
